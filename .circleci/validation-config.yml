version: 2.1

parameters:
  validate-opmon:
    type: boolean
    default: false
  validate-jetstream:
    type: boolean
    default: false
  validate-metrics:
    type: boolean
    default: false
  build-docs:
    type: boolean
    default: false
  base-revision:
    type: string
    default: << pipeline.git.base_revision >>

jobs:
  validate-metrics:
    docker:
    - image: python:3.10
    environment:
      BASE_COMMIT: << pipeline.parameters.base-revision >>
      REVISION_COMMIT: << pipeline.git.revision >>
    steps:
    - checkout
    - run:
        name: Build
        command: |
          pip install -r .script/requirements.txt
    - run:
        name: Validate config files
        command: |
          changed_files=$(git diff --name-only $BASE_COMMIT..$REVISION_COMMIT -- 'definitions/*.toml' 'definitions/*.example.toml')
          echo "Run validation on changed files: "
          echo $changed_files
          python3 .script/validate.py $changed_files
  validate-opmon:
    docker:
    - image: gcr.io/moz-fx-data-experiments/opmon:latest
    environment:
      BASE_COMMIT: << pipeline.parameters.base-revision >>
      REVISION_COMMIT: << pipeline.git.revision >>
    steps:
    - checkout
    - run:
        name: Validate OpMon config files
        command: |
          changed_files=$(git diff --name-only $BASE_COMMIT..$REVISION_COMMIT -- 'opmon/*.toml' 'opmon/*.toml.example')
          echo "Run validation on changed files: "
          echo $changed_files
          opmon validate_config --config_repos='.' --config_repos=opmon/ $changed_files
  validate-jetstream:
    docker:
    - image: gcr.io/moz-fx-data-experiments/jetstream:latest
    environment:
      BASE_COMMIT: << pipeline.parameters.base-revision >>
      REVISION_COMMIT: << pipeline.git.revision >>
    steps:
    - checkout
    - run:
        name: Validate jetstream config files
        command: |
          changed_files=$(git diff --name-only $BASE_COMMIT..$REVISION_COMMIT -- 'jetstream/*.toml' 'jetstream/*.toml.example')
          echo "Run validation on changed files: "
          echo $changed_files
          jetstream validate_config --config_repos='.' --config_repos='jetstream/' $changed_files
  build-docs:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "95:33:49:57:f9:11:81:75:a4:46:74:19:c6:89:f4:1c"
      - run:
          name: Build and deploy docs
          command: |
            python3.10 -m venv venv/
            venv/bin/pip install -r .script/requirements.txt
            venv/bin/python3 .script/generate_docs.py \
              --output_dir=generated_docs/
            cd generated_docs/
            PATH="../venv/bin:$PATH" mkdocs gh-deploy \
              -m "[ci skip] Deployed {sha} with MkDocs version: {version}"
  rerun-jetstream:
    docker:
    - image: google/cloud-sdk
    environment:
      BASE_COMMIT: << pipeline.parameters.base-revision >>
      REVISION_COMMIT: << pipeline.git.revision >>
    steps:
    - checkout
    - &skip_forked_pr
      run:
        name: Early return if this build is from a forked PR
        command: |
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
            echo "Do not re-run analysis on forked PRs, so marking this step successful"
            circleci step halt
          fi
    - run:
        name: Authorize gcloud CLI
        command: |
          # required for parsing kubectl pod statuses
          apt-get install jq -y
          apt-get install uuid-runtime
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
          echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project $GCLOUD_PROJECT
          gcloud container clusters get-credentials jetstream --zone us-central1-a --project $GCLOUD_PROJECT
    - run:
        name: Rerun jetstream
        command: |
          changed_files=$(git diff --name-only $BASE_COMMIT..$REVISION_COMMIT -- 'jetstream/*.toml' 'jetstream/*.toml.example')

          # determine slugs of configs that got changed; filter out outcomes and defaults
          params=""
          for config in $changed_files; do
            slug=${config##*/}
            slug="${slug%.*}"
            if [ -e jetstream/"$slug".toml ]; then
              params+="--experiment_slug=${slug} "
            fi
          done

          # stop running instances so that they do not interfere
          uuid=`uuidgen`
          pod_identifier="jetstream-${uuid}"
          kubectl delete pod -l app=$pod_identifier

          commit_message=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
          if [[ "$commit_message" == *"[ci rerun-skip]"* ]] || [[ "$commit_message" == *"[ci rerun_skip]"* ]] || [[ "$commit_message" == *"[ci skip-rerun]"* ]] || [[ "$commit_message" == *"[ci skip_rerun]"* ]]; then
            echo "Skip rerun for files:"
            echo $changed_files

            # start a new instance
            kubectl run $pod_identifier --image=gcr.io/moz-fx-data-experiments/jetstream -l app=$pod_identifier --restart=Never --command -- jetstream rerun-skip $(echo $params)
          else
            echo "Rerun changed files: "
            echo $changed_files

            # start a new instance
            kubectl run $pod_identifier --image=gcr.io/moz-fx-data-experiments/jetstream -l app=$pod_identifier --restart=Never --command -- jetstream rerun --argo --return-status --recreate-enrollments $(echo $params)
            # link to logs
            cur_date=`date -u +%FT%TZ`
            echo "Pod Logs: https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%0Aresource.labels.project_id%3D%22moz-fx-data-experiments%22%0Aresource.labels.location%3D%22us-central1-a%22%0Aresource.labels.cluster_name%3D%22jetstream%22%0Aresource.labels.namespace_name%3D%22default%22?scrollTimestamp=$cur_date"
            echo "Analysis Errors can be accessed via Redash: https://sql.telemetry.mozilla.org/dashboard/jetstream-errors?p_experiment=%25"
            # wait for pod to finish and check status
          fi

          running=true
          while [ $running = true ]
          do
            echo "Wait for jetstream to finish"
            pod_status=`kubectl get pod -l app=$pod_identifier --no-headers -o custom-columns=":status.phase"`
            if [ $pod_status = 'Succeeded' ] || [ $pod_status = 'Failed' ]; then
              running=false
            fi
            sleep 10
          done
          # delete pod
          kubectl delete pod -l app=$pod_identifier
          if [ $pod_status = 'Failed' ]; then
            echo "Error when running jetstream. Check the logs for more information."
            exit 1
          elif [ $pod_status = 'Succeeded' ]; then
            echo "Jetstream successfully completed."
          else
            echo "Jetstream completed in unknown status. Please check the logs."
            echo "Analysis Errors can be accessed via Redash: https://sql.telemetry.mozilla.org/dashboard/jetstream-errors?p_experiment=%25"
            exit 1
          fi
workflows:
  version: 2
  validate-metrics:
    when: 
      or: 
        - << pipeline.parameters.validate-metrics >>
    jobs:
      - validate-metrics
  validate-opmon:
    when: 
      or: 
        - << pipeline.parameters.validate-opmon >>
    jobs:
      - validate-opmon
  validate-jetstream:
    when: 
      or: 
        - << pipeline.parameters.validate-jetstream >>
    jobs:
      - validate-jetstream
  rerun-jetstream:
    when: 
      or: 
        - << pipeline.parameters.validate-jetstream >>
    jobs:
      - rerun-jetstream:
          filters:
            branches:
              only: main
  build-docs:
    when: 
      or: 
        - << pipeline.parameters.build-docs >>
    jobs:
      - build-docs:
          filters:
            branches:
              only: main
