[experiment]

segments = [
    'windows',
    'linux',
    'mac'
]

## Data Sources

[data_sources]

## crash: removing session corresponding to enrollment
[data_sources.crash_hour]
from_expression = """
(
  SELECT
    cr.*,
    DATE(cr.submission_timestamp) AS submission_date,
    cr.environment.experiments,
    COALESCE(m.payload.processes.parent.scalars.browser_engagement_active_ticks, 0)*5 as active_s
  FROM
    `moz-fx-data-shared-prod.telemetry_stable.crash_v4` cr
    INNER JOIN  `moz-fx-data-shared-prod`.telemetry_stable.main_v4 m
      ON m.client_id = cr.client_id
      AND DATE(m.submission_timestamp) = DATE(cr.submission_timestamp)
    WHERE DATE(m.submission_timestamp) >= '2023-07-25'
    AND DATE(cr.submission_timestamp) >= '2023-07-25'
    AND m.normalized_channel = 'nightly'
    AND cr.normalized_channel = 'nightly'
    )
"""
experiments_column_type = "native"

## Metrics
[metrics]

overall = [
    'perf_page_load_time_ms', 'time_to_first_interaction_ms',
    'input_event_response_ms', 'input_event_response_ms_parent',
    'perf_first_contentful_paint_ms',
    'gpu_keypress_present_latency',
    'dns_lookup_time', 'http_page_tls_handshake',
    'http_page_open_to_first_sent', 'time_to_response_start_ms',
    'http_transactions_using_tls', 'http_channels_success',
    'tls_successful_cert_validation_time', 'tls_successful_first_try_connections',
    'memory_total', 'memory_unique_content_startup',
    'main_crashes_per_hour', 'content_crashes_per_hour',
    'oom_crashes_per_hour', 'shutdown_hangs_per_hour'
]

weekly = [
    'perf_page_load_time_ms', 'time_to_first_interaction_ms',
    'input_event_response_ms', 'input_event_response_ms_parent',
    'perf_first_contentful_paint_ms',
    'gpu_keypress_present_latency',
    'dns_lookup_time', 'http_page_tls_handshake',
    'http_page_open_to_first_sent', 'time_to_response_start_ms',
    'http_transactions_using_tls', 'http_channels_success',
    'tls_successful_cert_validation_time', 'tls_successful_first_try_connections',
    'memory_total', 'memory_unique_content_startup',
    'main_crashes_per_hour', 'content_crashes_per_hour',
    'oom_crashes_per_hour', 'shutdown_hangs_per_hour'
]

daily = [
]

## Performance
    [metrics.perf_page_load_time_ms]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.perf_page_load_time_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.perf_page_load_time_ms.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.perf_page_load_time_ms.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.perf_page_load_time_ms.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true


    [metrics.time_to_first_interaction_ms]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.time_to_first_interaction_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.time_to_first_interaction_ms.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.time_to_first_interaction_ms.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.time_to_first_interaction_ms.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.input_event_response_ms]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.input_event_response_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.input_event_response_ms.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.input_event_response_ms.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.input_event_response_ms.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.input_event_response_ms_parent]
    select_expression = '{{agg_histogram_mean("payload.histograms.input_event_response_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.input_event_response_ms_parent.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.input_event_response_ms_parent.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.input_event_response_ms_parent.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.perf_first_contentful_paint_ms]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.perf_first_contentful_paint_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.perf_first_contentful_paint_ms.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.perf_first_contentful_paint_ms.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.perf_first_contentful_paint_ms.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true


    [metrics.gpu_keypress_present_latency]
    select_expression = '{{agg_histogram_mean("payload.processes.gpu.histograms.keypress_present_latency")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.gpu_keypress_present_latency.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.gpu_keypress_present_latency.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.gpu_keypress_present_latency.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.dns_lookup_time]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.dns_lookup_time")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.dns_lookup_time.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.dns_lookup_time.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.dns_lookup_time.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.http_page_tls_handshake]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.http_page_tls_handshake")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.http_page_tls_handshake.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.http_page_tls_handshake.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.http_page_tls_handshake.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.http_page_open_to_first_sent]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.http_page_open_to_first_sent")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.http_page_open_to_first_sent.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.http_page_open_to_first_sent.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.http_page_open_to_first_sent.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.time_to_response_start_ms]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.time_to_response_start_ms")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.time_to_response_start_ms.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.time_to_response_start_ms.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.time_to_response_start_ms.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.http_transactions_using_tls]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.http_transactions_using_tls")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.http_transactions_using_tls.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.http_transactions_using_tls.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.http_transactions_using_tls.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.http_channels_success]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.http_channels_success")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.http_channels_success.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.http_channels_success.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.http_channels_success.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.tls_successful_cert_validation_time]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.tls_successful_cert_validation_time")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.tls_successful_cert_validation_time.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.tls_successful_cert_validation_time.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.tls_successful_cert_validation_time.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.tls_successful_first_try_connection]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.tls_successful_first_try_connection")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.tls_successful_first_try_connection.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.tls_successful_first_try_connection.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.tls_successful_first_try_connection.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

## Memory
    [metrics.memory_total]
    select_expression = '{{agg_histogram_mean("payload.histograms.memory_total")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.memory_total.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.memory_total.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.memory_total.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

    [metrics.memory_unique_content_startup]
    select_expression = '{{agg_histogram_mean("payload.processes.content.histograms.memory_unique_content_startup")}}'
    data_source = 'main'
    bigger_is_better = false

        [metrics.memory_unique_content_startup.statistics.deciles]
        pre_treatments = ["remove_nulls"]

        [metrics.memory_unique_content_startup.statistics.kernel_density_estimate]
        pre_treatments = ["remove_nulls"]
        log_space = true

        [metrics.memory_unique_content_startup.statistics.empirical_cdf]
        pre_treatments = ["remove_nulls"]
        log_space = true

## Crashes
    [metrics.main_crashes_per_hour]
    select_expression = """
        SAFE_DIVIDE(
            COALESCE(SUM(IF(payload.process_type = 'main' OR payload.process_type IS NULL, 1, 0)), 0),
            SUM(active_s/3600)
         )
        """
    data_source = 'crash_hour'
    bigger_is_better = false

        [metrics.main_crashes_per_hour.statistics.bootstrap_mean]
        pre_treatments = ["remove_nulls"]

        [metrics.main_crashes_per_hour.statistics.deciles]
        pre_treatments = ["remove_nulls"]

#        [metrics.main_crashes_per_hour.statistics.kernel_density_estimate]
#        pre_treatments = ["remove_nulls"]
#        log_space = true
#
#        [metrics.main_crashes_per_hour.statistics.empirical_cdf]
#        pre_treatments = ["remove_nulls"]
#        log_space = true

    [metrics.content_crashes_per_hour]
    select_expression = """
        SAFE_DIVIDE(
            COALESCE(SUM(IF(REGEXP_CONTAINS(payload.process_type, 'content')
                AND NOT REGEXP_CONTAINS(COALESCE(payload.metadata.ipc_channel_error, ''), 'ShutDownKill'), 1,0)), 0),
            SUM(active_s/3600)
         )
        """
    data_source = 'crash_hour'
    bigger_is_better = false

        [metrics.content_crashes_per_hour.statistics.bootstrap_mean]
        pre_treatments = ["remove_nulls"]

        [metrics.content_crashes_per_hour.statistics.deciles]
        pre_treatments = ["remove_nulls"]

#        [metrics.content_crashes_per_hour.statistics.kernel_density_estimate]
#        pre_treatments = ["remove_nulls"]
#        log_space = true
#
#        [metrics.content_crashes_per_hour.statistics.empirical_cdf]
#        pre_treatments = ["remove_nulls"]
#        log_space = true

    [metrics.oom_crashes_per_hour]
    select_expression = """
        SAFE_DIVIDE(
            COALESCE(SUM(IF(payload.metadata.oom_allocation_size IS NOT NULL, 1, 0)), 0),
            SUM(active_s/3600)
         )
        """
    data_source = 'crash_hour'
    bigger_is_better = false

        [metrics.oom_crashes_per_hour.statistics.bootstrap_mean]
        pre_treatments = ["remove_nulls"]

        [metrics.oom_crashes_per_hour.statistics.deciles]
        pre_treatments = ["remove_nulls"]

#        [metrics.oom_crashes_per_hour.statistics.kernel_density_estimate]
#        pre_treatments = ["remove_nulls"]
#        log_space = true
#
#        [metrics.oom_crashes_per_hour.statistics.empirical_cdf]
#        pre_treatments = ["remove_nulls"]
#        log_space = true


    [metrics.shutdown_hangs_per_hour]
    select_expression = """
        SAFE_DIVIDE(
            COALESCE(SUM(IF(payload.metadata.moz_crash_reason LIKE 'MOZ_CRASH%', 1, 0)), 0),
            SUM(active_s/3600)
         )
        """
    data_source = 'crash_hour'
    bigger_is_better = false

        [metrics.shutdown_hangs_per_hour.statistics.bootstrap_mean]
        pre_treatments = ["remove_nulls"]

        [metrics.shutdown_hangs_per_hour.statistics.deciles]
        pre_treatments = ["remove_nulls"]

#        [metrics.shutdown_crashes_per_hour.statistics.kernel_density_estimate]
#        pre_treatments = ["remove_nulls"]
#        log_space = true
#
#        [metrics.shutdown_crashes_per_hour.statistics.empirical_cdf]
#        pre_treatments = ["remove_nulls"]
#        log_space = true


## Segments
[segments]

[segments.windows]
select_expression = """COALESCE(LOGICAL_OR(os='Windows_NT'), FALSE)"""
data_source = "clients_last_seen"

[segments.linux]
select_expression = """COALESCE(LOGICAL_OR(os='Linux'), FALSE)"""
data_source = "clients_last_seen"

[segments.mac]
select_expression = """COALESCE(LOGICAL_OR(os='Darwin'), FALSE)"""
data_source = "clients_last_seen"
